#include "GenerateCommand.h"

#if USE_ACTS
#include "ipog/Acts.h"
#endif
#include "ipog/DitherAdapter.h"
#include "plugin/PluginImpl.h"
#include "test/ConfigGenerator.h"
#include "util/Util.h"

GenerateCommand::GenerateCommand (CLI::App* app, int& returnValue, FileSystem* fs)
{
    auto command = app->add_subcommand ("generate", "Generate test configurations.");

    command
        ->add_option ("-i,--input", parameters.input,
                      "Path to plugin OR path to info.json generated by the test command")
        ->required();
    command->add_option ("-o,--output", parameters.json, "Path to output JSON")->required();
    command->add_option ("--seed", parameters.seed,
                         "Seed for random generator (default: 42, only used by the 'random' strategy)");

    std::vector<std::string> options = {"dither", "random"};
#ifdef USE_ACTS
    options.push_back ("acts");
#endif

    command->add_option ("-s,--strategy", parameters.strategy, "Test generation strategy (default: random)")
        ->check (CLI::IsMember (options));
    command->add_option (
        "-d,--degree", parameters.interactions,
        "Number of interactions for combinatorial testing (default: 2, only used by the 'dither' and 'acts' strategy)");
    command->add_option (
        "-e,--exclude", parameters.exclude,
        "Specify one or more parameter names. These parameter's values will not be modified during testing");
    command->add_option ("-n,--num", parameters.numTests,
                         "Number of tests to be generated (default: 100, only used by the 'random' strategy)");
    command->parse_complete_callback (
        [fs, &returnValue, &parameters = parameters]() { returnValue = execute (parameters, fs); });
}

int GenerateCommand::execute (const Parameters& parameters, FileSystem* fs)
{
    Plugin::Info info;
    if ( fs->isPlugin (parameters.input) )
        info = fs->openPlugin (parameters.input)->getInfo();
    else
        info = fs->readJson<Plugin::Info> (parameters.input);

    std::cout << "Generating tests for info at path: " << parameters.input << std::endl;
    std::cout << "Saving results at path: " << parameters.json << std::endl;
    std::cout << "Strategy: " << parameters.strategy << std::endl;
    std::cout << "Excluded parameters: " << util::join (parameters.exclude, ", ") << std::endl;

    if ( parameters.strategy == "random" )
    {
        std::cout << "Seed: " << parameters.seed << std::endl;
        std::cout << "NumTests: " << parameters.numTests << std::endl;
    }
    else
    {
        std::cout << "Degree: " << parameters.interactions << std::endl;
    }

    TestConfigurations configs;

    if ( parameters.strategy == "dither" )
        configs = DitherAdapter::generate (info, parameters);
#ifdef USE_ACTS
    else if ( parameters.strategy == "acts" )
        configs = Acts::generate (fs, info, parameters);
#endif
    else
        configs = ConfigGenerator::generateRandom (info, parameters);

    std::cout << "Generated " << configs.size() << " processing tests." << std::endl;
    fs->writeJson (parameters.json, configs, true);
    return 0;
}